@{
    ViewBag.Title = "Mapa de Calor";
}

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>
<!-- Create a div where the graph will take place -->


<div class="container-fluid">
    <h1 class="h3 mb-2 text-gray-800">Mapa de Calor: <spam style="color: #909090;"> eixo x horas - eixo y dias</spam></h1>
    <div class="row" style="padding-top: 30px !important;">
        <div id="div_palcogetnet"></div>
        <div id="div_restaurante"></div>
    </div>
    <div class="row" style="padding-top: 30px !important;">
        <div id="div_entrada"></div>
        <div id="div_corredor"></div>
    </div>
</div>

<!-- Load color palettes -->
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

<script>
    function pegapseg(vl) {
        var cont = 1;
        vl = vl / 60 / 60;
        vltmp = vl;
        while (vltmp <= 1) {
            vltmp = vl;
            cont++;
            vltmp = vltmp * cont;
        }
        return cont;
    }

// set the dimensions and margins of the graph
var margin = {top: 80, right: 25, bottom: 30, left: 150},
  width = 650 - margin.left - margin.right,
  height = 250 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#div_entrada")
.append("svg")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)
.append("g")
  .attr("transform",
        "translate(" + margin.left + "," + margin.top + ")");

//Read the data
d3.csv("@Url.Content("~/data/heatmap_entrada_gs.csv")", function(data) {

  // Labels of row and columns -> unique identifier of the column called 'group' and 'variable'
  var myGroups = d3.map(data, function(d){return d.group;}).keys()
  var myVars = d3.map(data, function(d){return d.variable;}).keys()

  // Build X scales and axis:
  var x = d3.scaleBand()
    .range([ 0, width ])
    .domain(myGroups)
    .padding(0.05);
  svg.append("g")
    .style("font-size", 15)
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x).tickSize(0))
    .select(".domain").remove()

  // Build Y scales and axis:
  var y = d3.scaleBand()
    .range([ height, 0 ])
    .domain(myVars)
    .padding(0.05);
  svg.append("g")
    .style("font-size", 15)
    .call(d3.axisLeft(y).tickSize(0))
    .select(".domain").remove()

    var myColor = d3.scaleLinear()
        .range(["white", "#000bc0"])
        .domain([1, 1050])

  // create a tooltip
  var tooltip = d3.select("#div_entrada")
    .append("div")
    .style("opacity", 0)
    .attr("class", "tooltip")
    .style("background-color", "white")
    .style("border", "solid")
    .style("border-width", "2px")
    .style("border-radius", "5px")
    .style("padding", "5px")

  // Three function that change the tooltip when user hover / move / leave a cell
    var mouseover = function (d) {
        tooltip
            .style("opacity", 1)
        d3.select(this)
            .style("stroke", "#ff3e88")
            .style("opacity", 0.8)
    }

  var mousemove = function(d) {
      tooltip
          .html(d.variable + ", " + d.value + " registros entre " + gethour(d.group) + ", média de um registro a cada " + pegapseg(d.value) + " segundos")
        .style("left", (d3.mouse(this)[0] + 230) + "px")
        .style("top", (d3.mouse(this)[1] + 450) + "px")
  }
    var mouseleave = function (d) {
        tooltip
            .style("opacity", 0)
        d3.select(this)
            .style("stroke", "none")
            .style("opacity", 0.8)
    }

  // add the squares
  svg.selectAll()
    .data(data, function(d) {return d.group+':'+d.variable;})
    .enter()
    .append("rect")
      .attr("x", function(d) { return x(d.group) })
      .attr("y", function(d) { return y(d.variable) })
      .attr("rx", 4)
      .attr("ry", 4)
      .attr("width", x.bandwidth() )
      .attr("height", y.bandwidth() )
      .style("fill", function(d) { return myColor(d.value)} )
      .style("stroke-width", 4)
      .style("stroke", "none")
      .style("opacity", 0.8)
    .on("mouseover", mouseover)
    .on("mousemove", mousemove)
    .on("mouseleave", mouseleave)
})

// Add title to graph
svg.append("text")
        .attr("x", 0)
        .attr("y", -50)
        .attr("text-anchor", "left")
        .style("font-size", "22px")
        .text("Entrada");

// Add subtitle to graph
svg.append("text")
        .attr("x", 0)
        .attr("y", -20)
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "grey")
        .style("max-width", 400)
        .text("Gráfico do sensor na entrada de visitantes.");



/*****************************************/
/****** -- Gráfico corredor -- ***********/

    // append the svg object to the body of the page
    var svg_corredor = d3.select("#div_corredor")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

d3.csv("@Url.Content("~/data/heatmap_corredor_gs.csv")", function(data) {

  // Labels of row and columns -> unique identifier of the column called 'group' and 'variable'
  var myGroups = d3.map(data, function(d){return d.group;}).keys()
  var myVars = d3.map(data, function(d){return d.variable;}).keys()

  // Build X scales and axis:
  var x = d3.scaleBand()
    .range([ 0, width ])
    .domain(myGroups)
    .padding(0.05);
  svg_corredor.append("g")
    .style("font-size", 15)
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x).tickSize(0))
    .select(".domain").remove()

  // Build Y scales and axis:
  var y = d3.scaleBand()
    .range([ height, 0 ])
    .domain(myVars)
    .padding(0.05);
  svg_corredor.append("g")
    .style("font-size", 15)
    .call(d3.axisLeft(y).tickSize(0))
    .select(".domain").remove()

    var myColor = d3.scaleLinear()
        .range(["white", "#000bc0"])
        .domain([1, 1050])

  // create a tooltip
  var tooltip = d3.select("#div_corredor")
    .append("div")
    .style("opacity", 0)
    .attr("class", "tooltip")
    .style("background-color", "white")
    .style("border", "solid")
    .style("border-width", "2px")
    .style("border-radius", "5px")
    .style("padding", "5px")

  // Three function that change the tooltip when user hover / move / leave a cell
  var mouseover = function(d) {
    tooltip
      .style("opacity", 1)
    d3.select(this)
      .style("stroke", "#ff3e88")
      .style("opacity", 0.8)
  }
  var mousemove = function(d) {
    tooltip
        .html(d.variable + ", " + d.value + " registros entre " + gethour(d.group) + ", média de um registro a cada " + pegapseg(d.value) + " segundos")
        .style("left", (d3.mouse(this)[0] + 750) + "px")
      .style("top", (d3.mouse(this)[1] + 470) + "px")
  }
  var mouseleave = function(d) {
    tooltip
      .style("opacity", 0)
    d3.select(this)
      .style("stroke", "none")
      .style("opacity", 0.8)
  }

  // add the squares
  svg_corredor.selectAll()
    .data(data, function(d) {return d.group+':'+d.variable;})
    .enter()
    .append("rect")
      .attr("x", function(d) { return x(d.group) })
      .attr("y", function(d) { return y(d.variable) })
      .attr("rx", 4)
      .attr("ry", 4)
      .attr("width", x.bandwidth() )
      .attr("height", y.bandwidth() )
      .style("fill", function(d) { return myColor(d.value)} )
      .style("stroke-width", 4)
      .style("stroke", "none")
      .style("opacity", 0.8)
    .on("mouseover", mouseover)
    .on("mousemove", mousemove)
    .on("mouseleave", mouseleave)
})

    // Add title to graph
    svg_corredor.append("text")
        .attr("x", 0)
        .attr("y", -50)
        .attr("text-anchor", "left")
        .style("font-size", "22px")
        .text("Corredor");

    // Add subtitle to graph
    svg_corredor.append("text")
        .attr("x", 0)
        .attr("y", -20)
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "grey")
        .style("max-width", 400)
        .text("Gráfico do sensor no corredor ao lado do estande do Sebrae.");



/*********************************************/
/****** -- Gráfico palco getnet -- ***********/

    // append the svg object to the body of the page
    var svg_palcogetnet = d3.select("#div_palcogetnet")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

d3.csv("@Url.Content("~/data/heatmap_palcogetnet_gs.csv")", function(data) {

  // Labels of row and columns -> unique identifier of the column called 'group' and 'variable'
  var myGroups = d3.map(data, function(d){return d.group;}).keys()
  var myVars = d3.map(data, function(d){return d.variable;}).keys()

  // Build X scales and axis:
  var x = d3.scaleBand()
    .range([ 0, width ])
    .domain(myGroups)
    .padding(0.05);
  svg_palcogetnet.append("g")
    .style("font-size", 15)
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x).tickSize(0))
    .select(".domain").remove()

  // Build Y scales and axis:
  var y = d3.scaleBand()
    .range([ height, 0 ])
    .domain(myVars)
    .padding(0.05);
  svg_palcogetnet.append("g")
    .style("font-size", 15)
    .call(d3.axisLeft(y).tickSize(0))
    .select(".domain").remove()

    var myColor = d3.scaleLinear()
        .range(["white", "#000bc0"])
        .domain([1, 1050])

  // create a tooltip
  var tooltip = d3.select("#div_palcogetnet")
    .append("div")
    .style("opacity", 0)
    .attr("class", "tooltip")
    .style("background-color", "white")
    .style("border", "solid")
    .style("border-width", "2px")
    .style("border-radius", "5px")
    .style("padding", "5px")

  // Three function that change the tooltip when user hover / move / leave a cell
  var mouseover = function(d) {
      tooltip
          .style("opacity", 1)
      d3.select(this)
          .style("stroke", "#ff3e88")
          .style("opacity", 0.8)
  }
  var mousemove = function(d) {
    tooltip
        .html(d.variable + ", " + d.value + " registros entre " + gethour(d.group) + ", média de um registro a cada " + pegapseg(d.value) + " segundos")
      .style("left", (d3.mouse(this)[0]+ 210) + "px")
      .style("top", (d3.mouse(this)[1] + 180) + "px")
  }
    var mouseleave = function (d) {
        tooltip
            .style("opacity", 0)
        d3.select(this)
            .style("stroke", "none")
            .style("opacity", 0.8)
    }

  // add the squares
  svg_palcogetnet.selectAll()
    .data(data, function(d) {return d.group+':'+d.variable;})
    .enter()
    .append("rect")
      .attr("x", function(d) { return x(d.group) })
      .attr("y", function(d) { return y(d.variable) })
      .attr("rx", 4)
      .attr("ry", 4)
      .attr("width", x.bandwidth() )
      .attr("height", y.bandwidth() )
      .style("fill", function(d) { return myColor(d.value)} )
      .style("stroke-width", 4)
      .style("stroke", "none")
      .style("opacity", 0.8)
    .on("mouseover", mouseover)
    .on("mousemove", mousemove)
    .on("mouseleave", mouseleave)
})

    // Add title to graph
    svg_palcogetnet.append("text")
        .attr("x", 0)
        .attr("y", -50)
        .attr("text-anchor", "left")
        .style("font-size", "22px")
        .text("Palco Getnet");

    // Add subtitle to graph
    svg_palcogetnet.append("text")
        .attr("x", 0)
        .attr("y", -20)
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "grey")
        .style("max-width", 450)
        .text("Gráfico do sensor entre a entrada do palco Getnet e o estande da Hélice");




/********************************************/
/****** -- Gráfico restaurante -- ***********/

    // append the svg object to the body of the page
    var svg_restaurante = d3.select("#div_restaurante")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

d3.csv("@Url.Content("~/data/heatmap_restaurante_gs.csv")", function(data) {

  // Labels of row and columns -> unique identifier of the column called 'group' and 'variable'
  var myGroups = d3.map(data, function(d){return d.group;}).keys()
  var myVars = d3.map(data, function(d){return d.variable;}).keys()

  // Build X scales and axis:
  var x = d3.scaleBand()
    .range([ 0, width ])
    .domain(myGroups)
    .padding(0.05);
  svg_restaurante.append("g")
    .style("font-size", 15)
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x).tickSize(0))
    .select(".domain").remove()

  // Build Y scales and axis:
  var y = d3.scaleBand()
    .range([ height, 0 ])
    .domain(myVars)
    .padding(0.05);
  svg_restaurante.append("g")
    .style("font-size", 15)
    .call(d3.axisLeft(y).tickSize(0))
    .select(".domain").remove()

    var myColor = d3.scaleLinear()
        .range(["white", "#000bc0"])
        .domain([1, 1050])

  // create a tooltip
  var tooltip = d3.select("#div_restaurante")
    .append("div")
    .style("opacity", 0)
    .attr("class", "tooltip")
    .style("background-color", "white")
    .style("border", "solid")
    .style("border-width", "2px")
    .style("border-radius", "5px")
    .style("padding", "5px")

  // Three function that change the tooltip when user hover / move / leave a cell
  var mouseover = function(d) {
    tooltip
      .style("opacity", 1)
    d3.select(this)
      .style("stroke", "#ff3e88")
      .style("opacity", 0.8)
    }


    var mousemove = function (d) {
    tooltip
        .html(d.variable + ", " + d.value + " registros entre " + gethour(d.group) + ", média de um registro a cada " + pegapseg(d.value) + " segundos")
      .style("left", (d3.mouse(this)[0]+ 750) + "px")
      .style("top", (d3.mouse(this)[1] + 180) + "px")
  }
  var mouseleave = function(d) {
    tooltip
      .style("opacity", 0)
    d3.select(this)
      .style("stroke", "none")
      .style("opacity", 0.8)
  }

  // add the squares
  svg_restaurante.selectAll()
    .data(data, function(d) {return d.group+':'+d.variable;})
    .enter()
    .append("rect")
      .attr("x", function(d) { return x(d.group) })
      .attr("y", function(d) { return y(d.variable) })
      .attr("rx", 4)
      .attr("ry", 4)
      .attr("width", x.bandwidth() )
      .attr("height", y.bandwidth() )
      .style("fill", function(d) { return myColor(d.value)} )
      .style("stroke-width", 4)
      .style("stroke", "none")
      .style("opacity", 0.8)
    .on("mouseover", mouseover)
    .on("mousemove", mousemove)
    .on("mouseleave", mouseleave)
})

    // Add title to graph
    svg_restaurante.append("text")
        .attr("x", 0)
        .attr("y", -50)
        .attr("text-anchor", "left")
        .style("font-size", "22px")
        .text("Restaurante");

    // Add subtitle to graph
    svg_restaurante.append("text")
        .attr("x", 0)
        .attr("y", -20)
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "grey")
        .style("max-width", 400)
        .text("Gráfico do sensor na entrada do restaurante.");

    function gethour(hora) {
        hora = parseInt(hora);
        var horadois = hora;
        horadois++;
        //
        if (hora <= 9) {
            hora = "0" + hora + ":00";
        }
        else {
            hora = hora + ":00";
        }
        //
        if (horadois <= 9) {
            horadois = "0" + horadois + ":00";
        }
        else {
            horadois = horadois + ":00"
        }
        //
        return hora + '-' + horadois;
    }

</script>