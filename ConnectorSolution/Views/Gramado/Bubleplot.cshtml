
@{
    ViewBag.Title = "Bubleplot";
}

<script src="@Url.Content("~/vendor/d3/d3.v4.js")"></script>
<script src="@Url.Content("~/vendor/d3/d3-scale-chromatic.v1.min.js")"></script>

<div class="container-fluid">
    <h1 class="h3 mb-2 text-gray-800">Gráfico de Bolhas: <spam style="color: #909090;"> eixo x horas - eixo y dias</h1>
    <hr />
    <label style="color:#5a5c69; font-size: 20px; padding-left: 15px;">Dados do dia 31/07</label>
    <div class="row" style="padding-top: 5px !important; padding-bottom: 40px !important;">
        <div id="div_grafdia31"></div>
        <svg id="legend">
            <g class="legendCells">
                <g class="cell" transform="translate(0, 0)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(15, 72, 127);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Palco Getnet</text>
                </g>
                <g class="cell" transform="translate(0, 17)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(52, 109, 164);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Corredor</text>
                </g>
                <g class="cell" transform="translate(0, 34)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(160, 217, 255);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Restaurante</text>
                </g>
                <g class="cell" transform="translate(0, 51)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(0, 219, 249);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Entrada</text>
                </g>
            </g>
        </svg>
    </div>
    <hr />
    <label style="color:#5a5c69; font-size: 20px; padding-left: 15px;">Dados do dia 01/08</label>
    <div class="row" style="padding-top: 5px !important; padding-bottom: 40px !important;">
        <div id="div_grafdia01"></div>
        <svg id="legend">
            <g class="legendCells">
                <g class="cell" transform="translate(0, 0)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(15, 72, 127);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Palco Getnet</text>
                </g>
                <g class="cell" transform="translate(0, 17)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(52, 109, 164);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Corredor</text>
                </g>
                <g class="cell" transform="translate(0, 34)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(160, 217, 255);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Restaurante</text>
                </g>
                <g class="cell" transform="translate(0, 51)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(0, 219, 249)"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Entrada</text>
                </g>
            </g>
        </svg>
    </div>
    <hr />
    <label style="color:#5a5c69; font-size: 20px; padding-left: 15px;">Dados do dia 02/08</label>
    <div class="row" style="padding-top: 5px !important; padding-bottom: 40px !important;">
        <div id="div_grafdia02"></div>
        <svg id="legend">
            <g class="legendCells">
                <g class="cell" transform="translate(0, 0)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(15, 72, 127);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Palco Getnet</text>
                </g>
                <g class="cell" transform="translate(0, 17)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(52, 109, 164);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Corredor</text>
                </g>
                <g class="cell" transform="translate(0, 34)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(160, 217, 255);"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Restaurante</text>
                </g>
                <g class="cell" transform="translate(0, 51)">
                    <rect class="swatch" height="15" width="15" style="fill: rgb(0, 219, 249)"></rect>
                    <text class="label" transform="translate( 25, 12.5)">Entrada</text>
                </g>
            </g>
        </svg>
    </div>
</div>

<!-- Load d3.js -->
@*<script src="https://d3js.org/d3.v4.js"></script>*@
<!-- Load color scale -->
@*<script src="https://d3js.org/"></script>*@

<!-- A bit of CSS: change stroke color of circle on hover (white -> black) -->
<style>

    .bubbles {
        stroke-width: 2px;
        stroke: white;
    }

        .bubbles:hover {
            stroke: black;
        }
</style>

<script>
// set the dimensions and margins of the graph
var margin = {top: 10, right: 20, bottom: 30, left: 50},
    width = 1100 - margin.left - margin.right,
    height = 420 - margin.top - margin.bottom;

    console.log(width);

// append the svg object to the body of the page
var svg = d3.select("#div_grafdia31")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

//Read the data
d3.csv("@Url.Content("~/data/bubleplot_gs_31.csv")", function(data) {

  // Add X axis
  var x = d3.scaleLinear()
    .domain([7, 21])
    .range([ 0, width ]);
  svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x));

  // Add Y axis
  var y = d3.scaleLinear()
    .domain([0, 1700])
    .range([ height, 0]);
  svg.append("g")
    .call(d3.axisLeft(y));

  // Add a scale for bubble size
  var z = d3.scaleLinear()
    .domain([100, 1700])
    .range([ 10, 50]);

  // Add a scale for bubble color
  var myColor = d3.scaleOrdinal()
      .domain(["1", "2"])
      .range(['rgb(15, 72, 127)', 'rgb(52, 109, 164)', 'rgb(160, 217, 255)', 'rgb(0, 219, 249)']);
    //.range(d3.schemeSet2);

  // -1- Create a tooltip div that is hidden by default:
  var tooltip = d3.select("#div_grafdia31")
    .append("div")
      .style("opacity", 0)
      .attr("class", "tooltip")
      .style("background-color", "black")
      .style("border-radius", "5px")
      .style("padding", "10px")
      .style("color", "white")

  // -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip
  var showTooltip = function(d) {
    tooltip
      .transition()
      .duration(2000)
    tooltip
      .style("opacity", 1)
        .html("Local: " + d.local + "<br/>" + "Hora: " + gethour(d.hora) + "<br/>" + "Total: " + d.tot + " registros")
      .style("left", (d3.mouse(this)[0]+220) + "px")
      .style("top", (d3.mouse(this)[1]+100) + "px")
  }
  var moveTooltip = function(d) {
    tooltip
      //.style("left", (d3.mouse(this)[0]+30) + "px")
      //.style("top", (d3.mouse(this)[1]+30) + "px")
  }
  var hideTooltip = function(d) {
    tooltip
      .transition()
      .duration(4000)
      .style("opacity", 0)
  }

  // Add dots
  svg.append('g')
    .selectAll("dot")
    .data(data)
    .enter()
    .append("circle")
      .attr("class", "bubbles")
      .attr("cx", function (d) { return x(d.hora); } )
      .attr("cy", function (d) { return y(d.tot); } )
      .attr("r", function (d) { return z(d.tot); } )
      .style("fill", function (d) { return myColor(d.tipo); } )
    // -3- Trigger the functions
    .on("mouseover", showTooltip )
    .on("mousemove", moveTooltip )
        .on("mouseleave", hideTooltip)
})



    function gethour(hora) {
        if (hora <= 9) {
            return "0" + hora + ":00";
        }
        else {
            return hora + ":00";
        }
    }


/*************************************************/
/*************************************************/

  var margin = {top: 10, right: 20, bottom: 30, left: 50},
    width = 1100 - margin.left - margin.right,
    height = 420 - margin.top - margin.bottom;

    console.log(width);

// append the svg_dia01 object to the body of the page
var svg_dia01 = d3.select("#div_grafdia01")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

//Read the data
d3.csv("@Url.Content("~/data/bubleplot_gs_01.csv")", function(data) {

  // Add X axis
  var x = d3.scaleLinear()
    .domain([7, 21])
    .range([ 0, width ]);
  svg_dia01.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x));

  // Add Y axis
  var y = d3.scaleLinear()
    .domain([0, 1700])
    .range([ height, 0]);
  svg_dia01.append("g")
    .call(d3.axisLeft(y));

  // Add a scale for bubble size
  var z = d3.scaleLinear()
    .domain([100, 1700])
    .range([ 10, 50]);

  // Add a scale for bubble color
  var myColor = d3.scaleOrdinal()
      .domain(["1", "2"])
      .range(['rgb(15, 72, 127)', 'rgb(52, 109, 164)', 'rgb(160, 217, 255)', 'rgb(0, 219, 249)']);
    //.range(d3.schemeSet2);

  // -1- Create a tooltip div that is hidden by default:
    var tooltip = d3.select("#div_grafdia01")
    .append("div")
      .style("opacity", 0)
      .attr("class", "tooltip")
      .style("background-color", "black")
      .style("border-radius", "5px")
      .style("padding", "10px")
      .style("color", "white")

  // -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip
  var showTooltip = function(d) {
    tooltip
      .transition()
      .duration(2000)
    tooltip
      .style("opacity", 1)
        .html("Local: " + d.local + "<br/>" + "Hora: " + gethour(d.hora) + "<br/>" + "Total: " + d.tot + " registros")
      .style("left", (d3.mouse(this)[0]+220) + "px")
      .style("top", (d3.mouse(this)[1]+700) + "px")
  }
  var moveTooltip = function(d) {
    tooltip
      //.style("left", (d3.mouse(this)[0]+30) + "px")
      //.style("top", (d3.mouse(this)[1]+30) + "px")
  }
  var hideTooltip = function(d) {
    tooltip
      .transition()
      .duration(4000)
      .style("opacity", 0)
  }

  // Add dots
  svg_dia01.append('g')
    .selectAll("dot")
    .data(data)
    .enter()
    .append("circle")
      .attr("class", "bubbles")
      .attr("cx", function (d) { return x(d.hora); } )
      .attr("cy", function (d) { return y(d.tot); } )
      .attr("r", function (d) { return z(d.tot); } )
      .style("fill", function (d) { return myColor(d.tipo); } )
    // -3- Trigger the functions
    .on("mouseover", showTooltip )
    .on("mousemove", moveTooltip )
        .on("mouseleave", hideTooltip)
})



/*************************************************/
/*************************************************/

  var margin = {top: 10, right: 20, bottom: 30, left: 50},
    width = 1100 - margin.left - margin.right,
    height = 420 - margin.top - margin.bottom;

    console.log(width);

// append the svg_dia02 object to the body of the page
var svg_dia02 = d3.select("#div_grafdia02")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

//Read the data
d3.csv("@Url.Content("~/data/bubleplot_gs_02.csv")", function(data) {

  // Add X axis
  var x = d3.scaleLinear()
    .domain([7, 21])
    .range([ 0, width ]);
  svg_dia02.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x));

  // Add Y axis
  var y = d3.scaleLinear()
    .domain([0, 1700])
    .range([ height, 0]);
  svg_dia02.append("g")
    .call(d3.axisLeft(y));

  // Add a scale for bubble size
  var z = d3.scaleLinear()
    .domain([100, 1700])
    .range([ 10, 50]);

  // Add a scale for bubble color
  var myColor = d3.scaleOrdinal()
      .domain(["1", "2"])
      .range(['rgb(15, 72, 127)', 'rgb(52, 109, 164)', 'rgb(160, 217, 255)', 'rgb(0, 219, 249)']);
    //.range(d3.schemeSet2);

  // -1- Create a tooltip div that is hidden by default:
    var tooltip = d3.select("#div_grafdia02")
    .append("div")
      .style("opacity", 0)
      .attr("class", "tooltip")
      .style("background-color", "black")
      .style("border-radius", "5px")
      .style("padding", "10px")
      .style("color", "white")

  // -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip
  var showTooltip = function(d) {
    tooltip
      .transition()
      .duration(2000)
    tooltip
      .style("opacity", 1)
        .html("Local: " + d.local + "<br/>" + "Hora: " + gethour(d.hora) + "<br/>" + "Total: " + d.tot + " registros")
      .style("left", (d3.mouse(this)[0]+220) + "px")
      .style("top", (d3.mouse(this)[1]+1100) + "px")
  }
  var moveTooltip = function(d) {
    tooltip
      //.style("left", (d3.mouse(this)[0]+30) + "px")
      //.style("top", (d3.mouse(this)[1]+30) + "px")
  }
  var hideTooltip = function(d) {
    tooltip
      .transition()
      .duration(4000)
      .style("opacity", 0)
  }

  // Add dots
  svg_dia02.append('g')
    .selectAll("dot")
    .data(data)
    .enter()
    .append("circle")
      .attr("class", "bubbles")
      .attr("cx", function (d) { return x(d.hora); } )
      .attr("cy", function (d) { return y(d.tot); } )
      .attr("r", function (d) { return z(d.tot); } )
      .style("fill", function (d) { return myColor(d.tipo); } )
    // -3- Trigger the functions
    .on("mouseover", showTooltip )
    .on("mousemove", moveTooltip )
        .on("mouseleave", hideTooltip)
})
    function gethour(hora) {
        if (hora <= 9) {
            return "0" + hora + ":00" + " até " + "0" + hora + ":59";
        }
        else {
            return hora + ":00" + " até " + hora + ":59";
        }
    }

    $(document).ready(function () {
        //
        //for (var i = 0; i < $('.bubbles').length; i++) {
        //    //
        //    if ($('.bubbles')[i].style.fill == 'rgb(102, 194, 165)') {
        //        $('.bubbles')[i].style.fill = 'rgb(15, 72, 127)';
        //    }
        //    else if ($('.bubbles')[i].style.fill == 'rgb(252, 141, 98)') {
        //        $('.bubbles')[i].style.fill = 'rgb(52, 109, 164)';
        //    }
        //    else if ($('.bubbles')[i].style.fill == 'rgb(160, 217, 255)') {
        //        $('.bubbles')[i].style.fill = 'rgb(160, 217, 255)';
        //    }
        //    else if ($('.bubbles')[i].style.fill == 'rgb(141, 160, 203)') {
        //        $('.bubbles')[i].style.fill = 'rgb(0, 219, 249)';
        //    }
        //}
    })

</script>


